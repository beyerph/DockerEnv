version: '3'

services:



### Apache Server Container ##################################
    nginx:
        build:
            context: ./${DOCKER_DIRECTORY}/nginx
            args:
              HOSTNAMES: ${NGINX_HOSTNAMES}
              SHOPWARE_ENV: ${SHOPWARE_ENV}
        hostname: ${HOSTNAME}
        volumes:
            - ./${DOCKER_DIRECTORY}/nginx/logs:/var/log/nginx
            - ./${PROJECT_DIRECTORY}:/var/www/html
            - ./${DOCKER_DIRECTORY}/ssl/certs:/etc/nginx/ssl
        ports:
            - "${HTTP_PORT}:80"
            - "${HTTPS_PORT}:443"
        depends_on:
          - php-fpm
          - ssl
        links:
            - php-fpm:fpm
            - db:db
            - ${MAIL_SERVER_TYPE}:mail            


### PHP-FPM Container #######################################
    php-fpm:
        build:
            context: ./${DOCKER_DIRECTORY}/php
            dockerfile: ${PHP_DOCKERFILE}
            args:
              SHOPWARE_ENV: ${SHOPWARE_ENV}
        hostname: ${HOSTNAME}
        volumes:
          - ./${PROJECT_DIRECTORY}:/var/www/html
        expose:
          - "9000"
        links:
          - ${MAIL_SERVER_TYPE}:mail
          - redis:redis
#          - elasticsearch:elasticsearch
        labels:
          deck-chores.sw-cron.command: sh -c "php /var/www/html/bin/console --env=${SHOPWARE_ENV} sw:cron:run"
          deck-chores.sw-cron.interval: every minute


### MySQL Container #######################################
    db:
      build:
          context: ./${DOCKER_DIRECTORY}/mysql
          dockerfile: ${MYSQL_DOCKERFILE}
      hostname: ${HOSTNAME}
      environment:
        MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
        MYSQL_DATABASE: ${DB_NAME}
        MYSQL_USER: ${DB_USER}
        MYSQL_PASSWORD: ${DB_PASSWORD}
      ports:
        - 3306:3306


### Cronjobs ##############################################
    cron:
      image: funkyfuture/deck-chores
      restart: always
      volumes:
        - "/var/run/docker.sock:/var/run/docker.sock"


### SMTP Container #########################################
    smtp:
      image: namshi/smtp
      restart: always
      environment:
        MAILNAME: ${HOSTNAME}


### Mailcatcher for local Env ##############################################
    mailcatcher:
      image: helder/mailcatcher
      ports:
        - 1080:80    


### Create SelfSignedCerts ##############################################
    ssl:
        build:
            context: ./${DOCKER_DIRECTORY}/ssl
        hostname: ${HOSTNAME}
        environment:
            CA_HOSTS: ${CA_HOSTS}
        volumes:
            - ./${DOCKER_DIRECTORY}/ssl/certs:/certs


### DB-Backups ##############################################
#    db_backup:
#      image: deitch/mysql-backup
#      container_name: db_backup
#      restart: always
#      environment:
#        - DB_DUMP_TARGET=/db
#        - DB_USER=root
#        - DB_PASS=${DB_ROOT_PASSWORD}
#        - DB_DUMP_FREQ=720
#      links:
#        - db:db
#      volumes:
#        - "./../backups/db:/db"


### REDIS for Storing the SW-Sessions and Cache ##############################################
    redis:
      image: 'bitnami/redis:4.0'
      environment:
        - ALLOW_EMPTY_PASSWORD=yes
      ports:
        - '6379:6379'
      volumes:
        - ./${DOCKER_DIRECTORY}/redis/data:/bitnami


### ELASTICSEARCH ##############################################
#    elasticsearch:
#      build:
#          context: ./${DOCKER_DIRECTORY}/el
#      ports:
#        - "9200:9200"
#        - "9300:9300"
#      environment:
#        TERM: xterm
#        ES_JAVA_OPTS: "-Xms512m -Xmx512m"
#        "http.host": 0.0.0.0
#        "transport.host": 127.0.0.1        











            